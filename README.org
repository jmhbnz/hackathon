#+TITLE: OpenShift AI Hackathon
#+AUTHOR: James Blair, Tom Corcoran, Neo Xu
#+DATE: <2024-06-06 Thu>

This repository contains a basic [[https://nextjs.org/][nextjs]] frontend designed to be exported as a static site and served via [[https://pages.github.com/][github pages]], for the purposes of running an OpenShift AI hackathon.

Below are the instructions for manually setting up an environment to run the hackathon.


* Pre-requisites

This guide assumes you have the following packages installed locally:
- [[https://formulae.brew.sh/formula/openshift-cli][OpenShift client]] `oc`
- [[https://formulae.brew.sh/formula/rosa-cli][Red Hat OpenShift Service on AWS client]] `rosa`
- [[https://formulae.brew.sh/formula/awscli][Amazon Web Services client]] `aws`

#+NAME: Check pre-requisites
#+begin_src tmux
oc version && rosa version && aws --version
#+end_src


* Cluster provisioning

Each team participating in the hackathon will require a [[https://aws.amazon.com/rosa][Red Hat OpenShift on AWS (ROSA)]] cluster, which we will provision via the [[https://demo.redhat.com/catalog?item=babylon-catalog-prod/sandboxes-gpte.rosa.prod&utm_source=webapp&utm_medium=share-link][Red Hat Demo System]]. When requesting the environments we enable the workshop user interface with:
- The title `OpenShift AI Hackathon`
- Number of instances set to `12`
- AWS Region `eu-west-1`


* Cluster setup

For each cluster provisioned for the hackathon, the following steps need to be performed:


** Log in to cluster and rosa cli

Before we begin lets ensure our command line tools are authenticated. For `rosa` you'll need a token from the [[https://console.redhat.com/openshift/create/rosa/getstarted][Rosa Console]].

#+NAME: Authenticate cli tools
#+begin_src tmux
oc login --username "cluster-admin" --password "${PASSWORD}" <api-route>

rosa login --token "${ROSA_TOKEN}"

aws configure
#+end_src


** Create gpu machine pool

Our first task is to ensure each cluster has a GPU `MachineSet` present, we can follow the instructions from https://cloud.redhat.com/experts/rosa/gpu to complete this.

#+NAME: Create machine pool
#+begin_src tmux
# Define paramaters for machineset
export GPU_INSTANCE_TYPE='g5.8xlarge'
export CLUSTER_NAME=rosa-jfccs
export MACHINE_POOL_NAME=nvidia-gpu-pool
export MACHINE_POOL_REPLICA_COUNT=1

# Create the machineset with rosa cli
rosa create machinepool \
  --cluster="${CLUSTER_NAME}" \
  --name="${MACHINE_POOL_NAME}" \
  --replicas="${MACHINE_POOL_REPLICA_COUNT}" \
  --instance-type="${GPU_INSTANCE_TYPE}"

# Wait for the machineset to be ready
oc wait --for=jsonpath='{.status.readyReplicas}'=1 machineset \
  --selector hive.openshift.io/machine-pool="${MACHINE_POOL_NAME}" \
  --namespace openshift-machine-api \
  --timeout=600s
#+end_src


** Install and configure minio via oc

Once the cluster gpu machinepool has been created we need to deploy [[https://min.io/][minio]] so we can create storage buckets and pre seed models on the cluster for hackathon participants to consume.

#+NAME: Install minio via oc
#+begin_src tmux
# Deploy minio
oc new-project minio && oc --namespace minio apply -f setup/minio-setup.yaml

# Wait for minio to come up
oc --namespace minio rollout status deployment/minio --watch
#+end_src


With minio deployed we need to create a bucket and upload some content to it.

#+NAME: Configure minio via oc
#+begin_src tmux
oc get pods -n minio
#+end_src


** Download model from huggingface into each `on prem` clusters Minio `model`'s bucket

#+begin_src tmux
HUGGINGFACE_TOKEN="HUGGINGFACE_TOKEN"
pip install --upgrade huggingface_hub
huggingface-cli login --token "${HUGGINGFACE_TOKEN}"
git clone https://huggingface.co/instructlab/granite-7b-lab
#+end_src

or use this:
https://github.com/tnscorcoran/rhods-finetunning-demo/blob/main/vllm_get_from_huggingface.ipynb


** Upload model to cluster minio
Consider using this:
https://github.com/tnscorcoran/rhods-finetunning-demo/blob/main/vllm_push_to_minio.ipynb

TODO Run aws configure and pull values out of that automatically.

#+begin_src tmux
export AWS_ACCESS_KEY_ID=<placeholder>
export AWS_SECRET_ACCESS_KEY=<placeholder>
export AWS_DEFAULT_REGION=<placeholder>
export AWS_S3_ENDPOINT=$(oc get route minio-api -o jsonpath='.spec.host')
export AWS_S3_BUCKET="models"

python3 setup/minio-upload.py
#+end_src


